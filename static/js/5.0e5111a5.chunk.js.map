{"version":3,"sources":["components/Searchbar/Searchbar.module.css","views/MoviesPageView/MoviesPageView.module.css","components/Searchbar/Searchbar.js","views/MoviesPageView/MoviesPageView.js","services/movieAPI.js"],"names":["module","exports","Searchbar","onSubmit","useState","searchQuery","setSearchQuery","event","preventDefault","target","value","className","style","Form","Input","type","placeholder","onChange","margin","Button","primary","MoviesPageView","match","useRouteMatch","movies","setMovies","loading","setLoading","location","useLocation","history","useHistory","parsedMovies","JSON","parse","localStorage","getItem","useEffect","trim","a","fetchOnSearch","resultData","prevState","data","results","console","log","length","setItem","stringify","Container","onClick","push","state","from","search","map","movie","Item","Link","to","pathname","url","id","label","name","title","URL","KEY","fetchByTrending","axios","get","then","res","fetchByIdMovies","movieId","fetchByIdMoviesActors","fetchByIdMoviesReviews"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,OAAS,4B,oBCA1DD,EAAOC,QAAU,CAAC,OAAS,+BAA+B,KAAO,6BAA6B,KAAO,+B,iMCgDtFC,MA5Cf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAkBA,OACE,mCACE,uBAAMH,SAXW,SAAAI,GACnBA,EAAMC,iBACqB,KAAvBD,EAAME,OAAOC,OAIjBP,EAASE,IAKuBM,UAAWC,IAAMC,KAA/C,UACE,qBAAKF,UAAU,WAAf,SACE,cAACG,EAAA,EAAD,CACEJ,MAAOL,EACPU,KAAK,OACLC,YAAY,YACZC,SAxBsB,SAAAV,GACH,KAAvBA,EAAME,OAAOC,OAGjBJ,EAAeC,EAAME,OAAOC,YAuBxB,qBAAKC,UAAWC,IAAMM,OAAtB,SACE,cAACC,EAAA,EAAD,CAAQC,SAAO,EAACL,KAAK,SAArB,0B,gDC3BK,SAASM,IACtB,IAAMC,EAAQC,cACd,EAA4BnB,mBAAS,IAArC,mBAAOoB,EAAP,KAAeC,EAAf,KACA,EAAsCrB,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOsB,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,cACXC,EAAUC,cACVC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,WAErDC,qBAAU,WACmB,KAAvBhC,EAAYiC,QAIhB,sBAAC,4BAAAC,EAAA,6DACCZ,GAAW,GADZ,kBAG4Ba,YAAcnC,GAH1C,OAGSoC,EAHT,OAIGhB,GAAU,SAAAiB,GAAS,4BAAQA,GAAR,YAAsBD,EAAWE,KAAKC,aACzDjB,GAAW,GALd,gDAOGkB,QAAQC,IAAI,KAAML,YAClBd,GAAW,GARd,wDAAD,KAWC,CAACtB,IAEJgC,qBAAU,WACJb,EAAOuB,QACTZ,aAAaa,QAAQ,SAAUf,KAAKgB,UAAUzB,MAE/C,CAACA,IAEJa,qBAAU,YACQ,OAAZL,QAAY,IAAZA,OAAA,EAAAA,EAAce,SAAU,GAC1BtB,EAAUO,KAEX,IAYH,OACE,mCACE,eAACkB,EAAA,EAAD,WACE,qBAAKvC,UAAWC,IAAMM,OAAtB,SACE,wBAAQiC,QARD,WAAO,IAAD,IACnBrB,EAAQsB,KAAR,iBAAaxB,QAAb,IAAaA,GAAb,UAAaA,EAAUyB,aAAvB,aAAa,EAAiBC,YAA9B,QAAsC,MAOP3C,UAAU,mBAAnC,oBAKDe,GAAW,cAAC,IAAD,IAEZ,cAAC,EAAD,CAAWvB,SArBI,SAAAI,GACnBkB,EAAU,IACVnB,EAAeC,GACfuB,EAAQsB,KAAR,2BAAkBxB,GAAlB,IAA4B2B,OAAO,MAAD,OAAQhD,SAoBtC,6BACGiB,EAAOgC,KAAI,SAAAC,GACV,OACE,oBAAmB9C,UAAWC,IAAM8C,KAApC,SACE,cAAC,IAAD,CACE/C,UAAWC,IAAM+C,KACjBC,GAAI,CACFC,SAAS,GAAD,OAAKvC,EAAMwC,IAAX,YAAkBL,EAAMM,IAChCV,MAAO,CAAEC,KAAM1B,EAAUoC,MAAO,qBAJpC,SAOGP,EAAMQ,KAAOR,EAAMQ,KAAOR,EAAMS,SAR5BT,EAAMM,gB,wPCxEvBI,EAAM,gCACNC,EAAM,mCAENC,EAAe,uCAAG,sBAAA9B,EAAA,sEACT+B,IACVC,IADU,UACHJ,EADG,oCAC4BC,IACtCI,MAAK,SAAAC,GAAG,OAAIA,EAAI9B,KAAKC,WAHF,mFAAH,qDAMf8B,EAAe,uCAAG,WAAMC,GAAN,SAAApC,EAAA,sEACT+B,IAAMC,IAAN,UAAaJ,EAAb,iBAAyBQ,EAAzB,oBAA4CP,IADnC,mFAAH,sDAIfQ,EAAqB,uCAAG,WAAMD,GAAN,SAAApC,EAAA,sEACf+B,IAAMC,IAAN,UAAaJ,EAAb,kBAA0BQ,EAA1B,4BAAqDP,IADtC,mFAAH,sDAIrBS,EAAsB,uCAAG,WAAMF,GAAN,SAAApC,EAAA,sEAChB+B,IAAMC,IAAN,UACRJ,EADQ,iBACIQ,EADJ,4BAC+BP,EAD/B,2BADgB,mFAAH,sDAMtB5B,EAAa,uCAAG,WAAMe,GAAN,SAAAhB,EAAA,sEACP+B,IAAMC,IAAN,UACRJ,EADQ,gCACmBC,EADnB,yBACuCb,IAFhC,mFAAH","file":"static/js/5.0e5111a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Searchbar_Form__2XqpQ\",\"margin\":\"Searchbar_margin__2ri6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"margin\":\"MoviesPageView_margin__381PA\",\"Item\":\"MoviesPageView_Item__A87Na\",\"Link\":\"MoviesPageView_Link__1Sl0S\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Searchbar.module.css';\nimport { Input, Button } from 'semantic-ui-react';\n\nfunction Searchbar({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearchQueryChange = event => {\n    if (event.target.value === '') {\n      return;\n    }\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (event.target.value === '') {\n      return;\n    }\n\n    onSubmit(searchQuery);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={style.Form}>\n        <div className=\"ui input\">\n          <Input\n            value={searchQuery}\n            type=\"text\"\n            placeholder=\"Search...\"\n            onChange={handleSearchQueryChange}\n          />\n        </div>\n        <div className={style.margin}>\n          <Button primary type=\"submit\">\n            Find\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import Container from 'components/Container';\nimport Searchbar from 'components/Searchbar';\nimport CustomLoader from 'components/SpinnerLoader';\nimport React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { useLocation, useHistory, Link } from 'react-router-dom';\nimport { fetchOnSearch } from 'services/movieAPI';\nimport style from './MoviesPageView.module.css';\n\nexport default function MoviesPageView() {\n  const match = useRouteMatch();\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n  const parsedMovies = JSON.parse(localStorage.getItem('movies'));\n\n  useEffect(() => {\n    if (searchQuery.trim() === '') {\n      return;\n    }\n\n    (async () => {\n      setLoading(true);\n      try {\n        const resultData = await fetchOnSearch(searchQuery);\n        setMovies(prevState => [...prevState, ...resultData.data.results]);\n        setLoading(false);\n      } catch (error) {\n        console.log(error.resultData);\n        setLoading(false);\n      }\n    })();\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (movies.length) {\n      localStorage.setItem('movies', JSON.stringify(movies));\n    }\n  }, [movies]);\n\n  useEffect(() => {\n    if (parsedMovies?.length >= 1) {\n      setMovies(parsedMovies);\n    }\n  }, []);\n\n  const handleSubmit = event => {\n    setMovies([]);\n    setSearchQuery(event);\n    history.push({ ...location, search: `by=${event}` });\n  };\n\n  const onBack = () => {\n    history.push(location?.state?.from ?? '/');\n  };\n\n  return (\n    <>\n      <Container>\n        <div className={style.margin}>\n          <button onClick={onBack} className=\"ui button margin\">\n            Back\n          </button>\n        </div>\n\n        {loading && <CustomLoader />}\n\n        <Searchbar onSubmit={handleSubmit} />\n\n        <ul>\n          {movies.map(movie => {\n            return (\n              <li key={movie.id} className={style.Item}>\n                <Link\n                  className={style.Link}\n                  to={{\n                    pathname: `${match.url}/${movie.id}`,\n                    state: { from: location, label: 'Back to the list' },\n                  }}\n                >\n                  {movie.name ? movie.name : movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </Container>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '720fdb62fff13ad66b8dd7c6de97ca06';\n\nconst fetchByTrending = async () => {\n  return await axios\n    .get(`${URL}trending/all/day?api_key=${KEY}`)\n    .then(res => res.data.results);\n};\n\nconst fetchByIdMovies = async movieId => {\n  return await axios.get(`${URL}movie/${movieId}?api_key=${KEY}`);\n};\n\nconst fetchByIdMoviesActors = async movieId => {\n  return await axios.get(`${URL}/movie/${movieId}/credits?api_key=${KEY}`);\n};\n\nconst fetchByIdMoviesReviews = async movieId => {\n  return await axios.get(\n    `${URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  );\n};\n\nconst fetchOnSearch = async search => {\n  return await axios.get(\n    `${URL}search/movie?api_key=${KEY}&page=1&query=${search}`,\n  );\n};\n\nexport {\n  fetchByTrending,\n  fetchByIdMovies,\n  fetchByIdMoviesActors,\n  fetchByIdMoviesReviews,\n  fetchOnSearch,\n};\n"],"sourceRoot":""}