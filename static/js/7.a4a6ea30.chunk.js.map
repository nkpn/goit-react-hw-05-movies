{"version":3,"sources":["views/MovieDetailPage/MovieDetailsPage.module.css","views/MovieDetailPage/MovieDetailsPage.js","services/movieAPI.js"],"names":["module","exports","Review","lazy","CastView","MovieDetailsPage","onClick","useState","loading","setLoading","movie","setMovie","match","useRouteMatch","useParams","movieId","history","url","path","useHistory","location","useLocation","useEffect","a","fetchByIdMovies","response","data","console","log","fetch","className","event","push","state","from","style","InfoContainer","src","poster_path","alt","Title","original_title","Text","vote_average","overview","genres","map","genre","name","id","Navigation","to","link","activeClassName","activeLink","fallback","CustomLoader","URL","KEY","fetchByTrending","axios","get","then","res","results","fetchByIdMoviesActors","fetchByIdMoviesReviews","fetchOnSearch","search"],"mappings":"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","file":"static/js/7.a4a6ea30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InfoContainer\":\"MovieDetailsPage_InfoContainer__29A1F\",\"Poster\":\"MovieDetailsPage_Poster__39_AP\",\"Text\":\"MovieDetailsPage_Text__3xLhb\",\"link\":\"MovieDetailsPage_link__3DNU9\",\"activeLink\":\"MovieDetailsPage_activeLink__3jbPM MovieDetailsPage_link__3DNU9\"};","import { useState, useEffect, lazy, Suspense } from 'react';\nimport {\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch,\n  Route,\n  Switch,\n  NavLink,\n} from 'react-router-dom';\nimport style from './MovieDetailsPage.module.css';\nimport CustomLoader from 'components/SpinnerLoader/SpinnerLoader';\nimport { fetchByIdMovies } from 'services/movieAPI';\n\nconst Review = lazy(() =>\n  import('views/Review' /* webpackChunkName: Reviews */),\n);\nconst CastView = lazy(() =>\n  import('views/CastView' /* webpackChunkName: Cast View */),\n);\n\nconst MovieDetailsPage = onClick => {\n  const [loading, setLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const match = useRouteMatch();\n  const { movieId, url, path } = useParams();\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n      try {\n        const response = await fetchByIdMovies(movieId);\n        setLoading(false);\n        setMovie(response.data);\n      } catch (error) {\n        console.log(error.response);\n        setLoading(false);\n      }\n    };\n    fetch();\n  }, [movieId]);\n\n  const onBack = event => {\n    history.push(location?.state?.from ?? '/');\n  };\n\n  return (\n    <>\n      <button className=\"ui button\" onClick={onBack}>\n        Back\n      </button>\n      {loading && <CustomLoader />}\n      {movie && (\n        <>\n          <div className={style.InfoContainer}>\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                alt=\"Movie for you\"\n              />\n            </div>\n            <div>\n              <h2 className={style.Title}>{movie.original_title}</h2>\n              <p className={style.Text}>\n                User score : {movie.vote_average * 10}%\n              </p>\n              <h3>Overview:</h3>\n              <p className={style.Text}>{movie.overview}</p>\n              <h3>Genres:</h3>\n              <ul className={style.Text}>\n                {movie.genres.map(genre => (\n                  <li key={genre.id}>{genre.name}</li>\n                ))}\n              </ul>\n              <hr></hr>\n              <nav className={style.Navigation}>\n                <NavLink\n                  to={`${match.url}/cast`}\n                  className={style.link}\n                  activeClassName={style.activeLink}\n                >\n                  Cast\n                </NavLink>\n\n                <NavLink\n                  to={`${match.url}/review`}\n                  className={style.link}\n                  activeClassName={style.activeLink}\n                >\n                  Review\n                </NavLink>\n              </nav>\n            </div>\n          </div>\n          <hr></hr>\n        </>\n      )}\n      <Suspense fallback={CustomLoader}>\n        <Switch>\n          <Route path={`${match.path}/cast`}>\n            <CastView />\n          </Route>\n\n          <Route path={`${match.path}/review`}>\n            <Review />\n          </Route>\n        </Switch>\n      </Suspense>\n    </>\n  );\n};\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '720fdb62fff13ad66b8dd7c6de97ca06';\n\nconst fetchByTrending = async () => {\n  return await axios\n    .get(`${URL}trending/all/day?api_key=${KEY}`)\n    .then(res => res.data.results);\n};\n\nconst fetchByIdMovies = async movieId => {\n  return await axios.get(`${URL}movie/${movieId}?api_key=${KEY}`);\n};\n\nconst fetchByIdMoviesActors = async movieId => {\n  return await axios.get(`${URL}/movie/${movieId}/credits?api_key=${KEY}`);\n};\n\nconst fetchByIdMoviesReviews = async movieId => {\n  return await axios.get(\n    `${URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  );\n};\n\nconst fetchOnSearch = async search => {\n  return await axios.get(\n    `${URL}search/movie?api_key=${KEY}&page=1&query=${search}`,\n  );\n};\n\nexport {\n  fetchByTrending,\n  fetchByIdMovies,\n  fetchByIdMoviesActors,\n  fetchByIdMoviesReviews,\n  fetchOnSearch,\n};\n"],"sourceRoot":""}